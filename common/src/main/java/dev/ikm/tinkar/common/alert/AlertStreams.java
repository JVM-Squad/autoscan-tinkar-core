/*
 * Copyright Â© 2015 Integrated Knowledge Management (support@ikm.dev)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package dev.ikm.tinkar.common.alert;

import dev.ikm.tinkar.common.id.PublicIdStringKey;
import dev.ikm.tinkar.common.id.PublicIds;
import dev.ikm.tinkar.common.util.broadcast.Broadcaster;
import dev.ikm.tinkar.common.util.broadcast.SimpleBroadcaster;

import java.util.concurrent.ConcurrentHashMap;
/*
 * Alert streams are generated by tasks?
 * <p>
 * Alert streams are intercepted first at the node level, then at the window level, in a dedicated alert node, then at an application level.
 * <p>
 * Alerts have a scope: node, window, application
 * <p>
 * Alerts have resolvers/fixers? Could simply be dismissers.
 * <p>
 * Alerts have an importance: information, confirmation, warning, error
 * <p>
 * Each node has a filter that either consumes alerts, or sends them on.
 * <p>
 * Each node has a set of resolvers that can be automatically or manually applied.

 */
public class AlertStreams {
    public static final PublicIdStringKey<Broadcaster<AlertObject>> ROOT_ALERT_STREAM_KEY =
            new PublicIdStringKey(PublicIds.of("d2733c61-fef3-4051-bc96-137819a18d0a"), "root alert stream");
    private static ConcurrentHashMap<PublicIdStringKey<Broadcaster<AlertObject>>, Broadcaster<AlertObject>> alertStreamMap = new ConcurrentHashMap<>();

    public static void dispatchToRoot(Throwable e) {
        getRoot().dispatch(AlertObject.makeError(e));
    }

    public static Broadcaster<AlertObject> getRoot() {
        return get(ROOT_ALERT_STREAM_KEY);
    }

    public static Broadcaster<AlertObject> get(PublicIdStringKey<Broadcaster<AlertObject>> alertStreamKey) {
        return AlertStreams.alertStreamMap.computeIfAbsent(alertStreamKey, alertStreamPublicIdStringKey -> new SimpleBroadcaster<>());
    }
}
